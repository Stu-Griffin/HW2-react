{"version":3,"sources":["assets/img/gender-man.svg","assets/img/gender-woman.svg","assets/img/gender-anonim.svg","components/contact.js","components/contracts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Contact","props","className","firstName","lastName","phone","src","gender","alt","contacts","Contracts","state","data","inputValue","ChangeInputValue","event","setState","target","value","filter","el","toLowerCase","includes","maleGender","femaleGender","anonimGender","placeholder","this","onChange","map","i","key","changeGender","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gMCgB5BC,G,MAdC,SAACC,GACb,OACI,yBAAKC,UAAU,SACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,gBACX,4BAAKD,EAAME,WACX,4BAAKF,EAAMG,WAEf,wBAAIF,UAAU,gBAAgBD,EAAMI,QAExC,yBAAKC,IAAKL,EAAMM,OAAQL,UAAU,aAAaM,IAAI,c,gDCPzDC,EAAW,CAAC,CACdN,UAAW,uCACXC,SAAU,2EACVC,MAAO,gBACPE,OAAQ,QACT,CACCJ,UAAW,iCACXC,SAAU,+DACVC,MAAO,gBACPE,OAAQ,UACT,CACCJ,UAAW,yDACXC,SAAU,mDACVC,MAAO,iBACR,CACCF,UAAW,iCACXC,SAAU,mDACVC,MAAO,gBACPE,OAAQ,UACT,CACCJ,UAAW,uCACXC,SAAU,yDACVC,MAAO,gBACPE,OAAQ,QACT,CACCJ,UAAW,uCACXC,SAAU,6CACVC,MAAO,gBACPE,OAAQ,SAmDGG,E,4MAhDXC,MAAQ,CACJC,KAAK,GAAD,OAAMH,GACVI,WAAY,I,EAWhBC,iBAAmB,SAACC,GAChB,EAAKC,SAAS,CACVH,WAAYE,EAAME,OAAOC,QAE7B,EAAKF,SAAS,CACXJ,KAAK,YAAKH,EAASU,QAAO,SAAAC,GACtB,OACCA,EAAGhB,SAASiB,cAAcC,SAASP,EAAME,OAAOC,MAAMG,gBACtDD,EAAGjB,UAAUkB,cAAcC,SAASP,EAAME,OAAOC,MAAMG,gBACvDD,EAAGf,MAAMiB,SAASP,EAAME,OAAOC,c,2DAlB9BX,GACT,MAAc,SAAXA,EACQgB,IACU,WAAXhB,EACCiB,IAEAC,M,+BAiBL,IAAD,OACL,OACI,iCACI,2BAAOvB,UAAU,QAAQwB,YAAY,SAASR,MAAOS,KAAKhB,MAAME,WAAYe,SAAUD,KAAKb,mBAC3F,yBAAKZ,UAAU,SACVyB,KAAKhB,MAAMC,KAAKiB,KAAI,SAACT,EAAIU,GACtB,OACI,kBAAC,EAAD,CACIC,IAAKD,EACL3B,UAAWiB,EAAGjB,UACdI,OAAQ,EAAKyB,aAAaZ,EAAGb,QAC7BF,MAAOe,EAAGf,MACVD,SAAUgB,EAAGhB,oB,GAxCrB6B,aC5BTC,MALf,WACE,OACE,kBAAC,EAAD,OCQgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.09789fb5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gender-man.037e22c9.svg\";","module.exports = __webpack_public_path__ + \"static/media/gender-woman.08d6db10.svg\";","module.exports = __webpack_public_path__ + \"static/media/gender-anonim.2da83f11.svg\";","import React from 'react';\r\nimport './component.css';\r\nconst Contact = (props) => {\r\n    return (\r\n        <div className=\"block\">\r\n            <div className=\"left-side\">\r\n                <div className=\"personal-inf\">\r\n                    <h4>{props.firstName}</h4>\r\n                    <h4>{props.lastName}</h4>\r\n                </div>\r\n                <h4 className=\"phone-number\">{props.phone}</h4>\r\n            </div>\r\n            <img src={props.gender} className=\"right-side\" alt=\"gender\"/>\r\n        </div>\r\n    )\r\n}\r\nexport default Contact","import React, {Component} from 'react';\r\nimport Contact from './contact.js';\r\nimport maleGender from '../assets/img/gender-man.svg';\r\nimport femaleGender from '../assets/img/gender-woman.svg';\r\nimport anonimGender from '../assets/img/gender-anonim.svg';\r\nconst contacts = [{\r\n    firstName: \"Барней\",\r\n    lastName: \"Стинсовський\",\r\n    phone: \"+380956319521\",\r\n    gender: \"male\"\r\n}, {\r\n    firstName: \"Робін\",\r\n    lastName: \"Щербатська\",\r\n    phone: \"+380931460123\",\r\n    gender: \"female\"\r\n}, {\r\n    firstName: \"Анонімний\",\r\n    lastName: \"Анонімус\",\r\n    phone: \"+380666666666\"\r\n}, {\r\n    firstName: \"Лілія\",\r\n    lastName: \"Олдровна\",\r\n    phone: \"+380504691254\",\r\n    gender: \"female\"\r\n}, {\r\n    firstName: \"Маршен\",\r\n    lastName: \"Еріксонян\",\r\n    phone: \"+380739432123\",\r\n    gender: \"male\"\r\n}, {\r\n    firstName: \"Теодор\",\r\n    lastName: \"Мотсбес\",\r\n    phone: \"+380956319521\",\r\n    gender: \"male\"\r\n}];\r\nclass Contracts extends Component {\r\n    state = {\r\n        data: [...contacts],//копируем наши данные\r\n        inputValue: \"\",//то чудо что прийдет из инпута\r\n    }\r\n    changeGender(gender) {\r\n        if(gender === 'male') {\r\n            return maleGender\r\n        } else if(gender === 'female') {\r\n            return femaleGender\r\n        } else {\r\n            return anonimGender\r\n        }\r\n    }\r\n    ChangeInputValue = (event) => {\r\n        this.setState({\r\n            inputValue: event.target.value//добавим то что прийдет из инпута в inputValue\r\n        })\r\n        this.setState({\r\n           data: [...contacts.filter(el => { //сделаем проверку + filter самый лучший выбор \r\n               return (\r\n                el.lastName.toLowerCase().includes(event.target.value.toLowerCase()) || //когда ставлю inputValue.toLowerCase() работает не так как надо\r\n                el.firstName.toLowerCase().includes(event.target.value.toLowerCase()) || \r\n                el.phone.includes(event.target.value)\r\n               )\r\n           })] \r\n        })\r\n    }\r\n    render() {\r\n        return(\r\n            <section>\r\n                <input className=\"input\" placeholder=\"search\" value={this.state.inputValue} onChange={this.ChangeInputValue}/>\r\n                <div className=\"scrin\">\r\n                    {this.state.data.map((el, i) => {\r\n                        return(\r\n                            <Contact\r\n                                key={i}\r\n                                firstName={el.firstName}\r\n                                gender={this.changeGender(el.gender)}\r\n                                phone={el.phone}\r\n                                lastName={el.lastName}\r\n                            /> \r\n                        )     \r\n                    })}\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\nexport default Contracts","import React from 'react';\nimport Contracts from './components/contracts.js';\nfunction App() {\n  return (\n    <Contracts />\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}